// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  members       Member[]
  issues        Issue[]
  assignees     Assignee[]
  commments     Comment[]
}

model Board {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  User      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  members   Member[]
  lists     List[]
  assignees Assignee[]
}

model Member {
  id        String   @id @default(cuid())
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  boardId   String
  Board     Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  userId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model List {
  id        String   @id @default(cuid())
  name      String   @default("unnamed list")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boardId   String
  Board     Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade)
  issues    Issue[]
}

model Issue {
  id         String     @id @default(cuid())
  order      Int
  image      String
  type       String
  summary    String
  desc       String
  priority   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  reporterId String
  User       User?      @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  List       List?      @relation(fields: [listId], references: [id])
  listId     String?
  assignees  Assignee[]
  comments   Comment[]
}

model Assignee {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  issueId   String
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  boardId   String
  Board     Board?   @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  desc      String   @db.Char(200)
  createdAt DateTime @default(now())
  issueId   String
  Issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  userId    String
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
